<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Math Practice</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            background-color: #f4f4f9;
            margin: 0;
            overflow: hidden;
        }
        #controls {
            position: absolute;
            top: 20px;
            left: 20px;
            background: #fff;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
            font-size: 16px;
        }
        #controls label {
            display: block;
            margin-bottom: 10px;
        }
        #controls input, #controls select {
            width: 60px;
            padding: 5px;
            margin-top: 5px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 14px;
            display: inline-block;
        }
        #controls input[type=checkbox], #controls input[type=button] {
            width: auto;
        }
        #info {
            position: absolute;
            top: 20px;
            right: 20px;
            text-align: right;
            background: #fff;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            width: 200px;
            font-size: 16px;
        }
        #info div {
            margin-bottom: 10px;
        }
        #timer span {
            font-weight: bold;
        }
        #question-area {
            text-align: center;
            font-size: 48px;
            color: #333;
            transition: background-color 0.2s;
            background-color: #ddd; /* Grey shade before start */
            padding: 20px;
            border-radius: 10px;
            width: 600px; /* Fixed width for consistency */
            font-family: 'Courier New', monospace;
        }
        #question-area.started {
            background-color: transparent;
        }
        #answer {
            font-size: 48px;
            width: 200px;
            text-align: center;
            border: none;
            border-bottom: 2px solid #333;
            background: transparent;
            outline: none;
            margin-bottom: 20px;
            font-family: 'Courier New', monospace;
        }
        #answer::-webkit-outer-spin-button,
        #answer::-webkit-inner-spin-button,
        #addMin::-webkit-outer-spin-button,
        #addMin::-webkit-inner-spin-button,
        #addMax::-webkit-outer-spin-button,
        #addMax::-webkit-inner-spin-button,
        #subMin::-webkit-outer-spin-button,
        #subMin::-webkit-inner-spin-button,
        #subMax::-webkit-outer-spin-button,
        #subMax::-webkit-inner-spin-button,
        #mulMin::-webkit-outer-spin-button,
        #mulMin::-webkit-inner-spin-button,
        #mulMax::-webkit-outer-spin-button,
        #mulMax::-webkit-inner-spin-button,
        #divMin::-webkit-outer-spin-button,
        #divMin::-webkit-inner-spin-button,
        #divMax::-webkit-outer-spin-button,
        #divMax::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        #answer[type=number], #addMin[type=number], #addMax[type=number], #subMin[type=number], #subMax[type=number], #mulMin[type=number], #mulMax[type=number], #divMin[type=number], #divMax[type=number] {
            -moz-appearance: textfield;
        }
        #upcoming-questions {
            margin-top: 0;
        }
        .upcoming-question {
            opacity: 0.6;
            transition: opacity 0.3s;
            font-family: 'Courier New', monospace;
        }
        .upcoming-question:nth-child(2) {
            opacity: 0.4;
        }
        .upcoming-question:nth-child(3) {
            opacity: 0.2;
        }
        .question {
            white-space: pre;
            letter-spacing: -1px; /* Reduce spacing between characters */
        }
    </style>
</head>
<body>
    <div id="controls">
        <label>Time:
            <select id="timeSelect">
                <option value="60">60s</option>
                <option value="120">120s</option>
            </select>
        </label>
        <label>
            <input type="checkbox" id="addition" checked>Addition
            <input type="number" id="addMin" value="2">
            <input type="number" id="addMax" value="9">
        </label>
        <label>
            <input type="checkbox" id="subtraction">Subtraction
            <input type="number" id="subMin" value="2">
            <input type="number" id="subMax" value="9">
        </label>
        <label>
            <input type="checkbox" id="multiplication" checked>Multiplication
            <input type="number" id="mulMin" value="2">
            <input type="number" id="mulMax" value="9">
        </label>
        <label>
            <input type="checkbox" id="division">Division
            <input type="number" id="divMin" value="2">
            <input type="number" id="divMax" value="9">
        </label>
        <label>
            <input type="button" id="toggleSound" value="Sound: Off" onclick="toggleSound()">
        </label>
    </div>
    <div id="info">
        <div id="score">Score: 0</div>
        <div id="timer">Time: <span>60s</span></div>
        <div id="cpm">CPM: 0</div>
        <div id="cpm-history">CPM History:</div>
    </div>
    <div id="question-area">
        <input type="number" id="answer" onkeydown="restartOnEnter(event)" oninput="checkAnswer()">
        <div id="question" class="question"></div>
        <div id="upcoming-questions"></div>
    </div>

    <audio id="click-sound" src="res/sound.wav"></audio>

    <script>
        let correctAnswer;
        let score = 0;
        let total = 0;
        let timer;
        let timerStarted = false;
        let soundEnabled = false;
        const upcomingQuestions = [];
        const cpmHistory = [];

        function getRandomInt(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }

        function generateQuestion() {
            const operations = [];
            if (document.getElementById('addition').checked) operations.push('+');
            if (document.getElementById('subtraction').checked) operations.push('-');
            if (document.getElementById('multiplication').checked) operations.push('*');
            if (document.getElementById('division').checked) operations.push('/');
            const operation = operations[Math.floor(Math.random() * operations.length)];

            switch (operation) {
                case '+':
                    const addMin = parseInt(document.getElementById('addMin').value) || 2;
                    const addMax = parseInt(document.getElementById('addMax').value) || 9;
                    const aAdd = getRandomInt(addMin, addMax);
                    const bAdd = getRandomInt(addMin, addMax);
                    return { question: `${aAdd} + ${bAdd}`, answer: aAdd + bAdd };
                case '-':
                    const subMin = parseInt(document.getElementById('subMin').value) || 2;
                    const subMax = parseInt(document.getElementById('subMax').value) || 9;
                    const aSub = getRandomInt(subMin, subMax);
                    const bSub = getRandomInt(subMin, subMax);
                    return { question: `${aSub} - ${bSub}`, answer: aSub - bSub };
                case '*':
                    const mulMin = parseInt(document.getElementById('mulMin').value) || 2;
                    const mulMax = parseInt(document.getElementById('mulMax').value) || 9;
                    const aMul = getRandomInt(mulMin, mulMax);
                    const bMul = getRandomInt(mulMin, mulMax);
                    return { question: `${aMul} * ${bMul}`, answer: aMul * bMul };
                case '/':
                    const divMin = parseInt(document.getElementById('divMin').value) || 2;
                    const divMax = parseInt(document.getElementById('divMax').value) || 9;
                    const aDiv = getRandomInt(divMin, divMax);
                    const bDiv = getRandomInt(divMin, divMax);
                    const numerator = aDiv * bDiv; // Ensure the numerator is a multiple of bDiv
                    return { question: `${numerator} / ${bDiv}`, answer: numerator / bDiv };
            }
        }

        function updateUpcomingQuestions() {
            const upcomingQuestionsDiv = document.getElementById('upcoming-questions');
            upcomingQuestionsDiv.innerHTML = '';
            for (let i = 1; i < upcomingQuestions.length; i++) {
                const questionDiv = document.createElement('div');
                questionDiv.className = 'upcoming-question question';
                questionDiv.innerText = upcomingQuestions[i].question;
                upcomingQuestionsDiv.appendChild(questionDiv);
            }
        }

        function checkAnswer() {
            const answer = parseInt(document.getElementById('answer').value);
            if (answer === correctAnswer) {
                if (soundEnabled) {
                    playClickSound();
                }
                score++;
                total++;
                upcomingQuestions.shift();
                const nextQuestion = generateQuestion();
                upcomingQuestions.push(nextQuestion);
                correctAnswer = upcomingQuestions[0].answer;
                document.getElementById('question').innerText = upcomingQuestions[0].question;
                document.getElementById('answer').value = '';
                updateUpcomingQuestions();
                document.getElementById('score').innerText = `Score: ${score}`;
                if (!timerStarted) {
                    startTimer();
                }
            }
        }

        function playClickSound() {
            const clickSound = document.getElementById('click-sound');
            clickSound.currentTime = 0;
            clickSound.play();
        }

        function toggleSound() {
            soundEnabled = !soundEnabled;
            document.getElementById('toggleSound').value = soundEnabled ? 'Sound: On' : 'Sound: Off';
        }

        function startTimer() {
            timerStarted = true;
            score = 0;
            total = 0;
            const timeLimit = parseInt(document.getElementById('timeSelect').value);
            document.getElementById('score').innerText = `Score: ${score}`;
            document.getElementById('timer').innerHTML = `Time: <span>${timeLimit}s</span>`;
            document.getElementById('cpm').innerText = `CPM: 0`;
            document.getElementById('question-area').classList.add('started');
            timer = setInterval(() => {
                const currentTime = parseInt(document.querySelector('#timer span').innerText.replace('s', ''));
                if (currentTime > 0) {
                    document.querySelector('#timer span').innerText = `${currentTime - 1}s`;
                    const cpm = (score / (timeLimit - currentTime)) * 60;
                    document.getElementById('cpm').innerText = `CPM: ${cpm.toFixed(2)}`;
                } else {
                    clearInterval(timer);
                    const cpm = (score / timeLimit) * 60;
                    cpmHistory.push(cpm.toFixed(2));
                    updateCpmHistory();
                    setTimeout(() => {
                        initializePractice();
                    }, 500); // Pause for 0.5 seconds before restarting
                }
            }, 1000);
        }

        function updateCpmHistory() {
            const cpmHistoryDiv = document.getElementById('cpm-history');
            cpmHistoryDiv.innerHTML = 'CPM History:<br>' + cpmHistory.join('<br>');
        }

        function restartOnEnter(event) {
            if (event.key === "Enter") {
                initializePractice();
                document.getElementById('answer').focus();
            }
        }

        function initializePractice() {
            clearInterval(timer);
            timerStarted = false;
            document.getElementById('question-area').classList.remove('started');
            document.getElementById('answer').value = '';
            document.getElementById('score').innerText = 'Score: 0';
            document.getElementById('timer').innerHTML = `Time: <span>${document.getElementById('timeSelect').value}s</span>`;
            document.getElementById('cpm').innerText = `CPM: 0`;
            upcomingQuestions.length = 0;
            for (let i = 0; i < 4; i++) {
                const nextQuestion = generateQuestion();
                upcomingQuestions.push(nextQuestion);
            }
            correctAnswer = upcomingQuestions[0].answer;
            document.getElementById('question').innerText = upcomingQuestions[0].question;
            updateUpcomingQuestions();
            document.getElementById('answer').focus();
        }

        document.addEventListener('DOMContentLoaded', (event) => {
            initializePractice();
            document.getElementById('answer').focus();
        });
    </script>
</body>
</html>

